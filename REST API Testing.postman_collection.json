{
	"info": {
		"_postman_id": "c9fb8dfb-3851-4935-9199-8758ddf48557",
		"name": "REST API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26617008"
	},
	"item": [
		{
			"name": "/pcbs - Create new pcb",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/* -------------------------------------------------------------------------------------------------------\r",
							"                                                REQUEST\r",
							"------------------------------------------------------------------------------------------------------- */\r",
							"// Helper function to send a request and handle the response\r",
							"function sendRequest(url, callback) {\r",
							"    pm.sendRequest({\r",
							"        url: `${pm.collectionVariables.get('api_url')}${url}`,\r",
							"        method: 'GET',\r",
							"        header: {\r",
							"            'Authorization': `Bearer ${pm.collectionVariables.get(\"token\")}`\r",
							"        }\r",
							"    }, function (err, response) {\r",
							"        if (err) {\r",
							"            console.error(`Error while fetching data from ${url}:`, err);\r",
							"            return;\r",
							"        }\r",
							"        callback(response.json());\r",
							"    });\r",
							"}\r",
							"\r",
							"// Get an existing product line to associate with the new board\r",
							"sendRequest('/production-lines?page=0&size=1', (response) => {\r",
							"    pm.variables.set('validProductLine', JSON.stringify(\r",
							"        response.result.map(item => ({ id: item.id }))\r",
							"    ));\r",
							"});\r",
							"\r",
							"// Get an existing part number to use in CT06_Duplicated\r",
							"sendRequest('/pcbs?size=1', (response) => {\r",
							"    pm.variables.set('duplicatedPartNumber',\r",
							"    response.result[0].partNumber);\r",
							"});\r",
							"\r",
							"setTimeout(function ()  {\r",
							"    /* -------------------------------------------------------------------------------------------------------\r",
							"                                                    VALIDATION\r",
							"    ------------------------------------------------------------------------------------------------------- */\r",
							"    const validation = {\r",
							"        maxNameAndPartNumber: 100,\r",
							"        maxLengthAndWidth: 5,\r",
							"        negativeLengthAndWidth: -1,\r",
							"        nonIntLengthAndWidth: 'a',\r",
							"        duplicatedPartNumber: pm.variables.get('duplicatedPartNumber')\r",
							"    }; pm.variables.set('validation', validation) \r",
							"\r",
							"    /* -------------------------------------------------------------------------------------------------------\r",
							"                                                    TEST CASES\r",
							"    ------------------------------------------------------------------------------------------------------- */\r",
							"\r",
							"    const CT01_Valid = { \r",
							"        name: pm.variables.replaceIn('{{$randomWord}}'),                    // Valid Name\r",
							"        partNumber: pm.variables.replaceIn('{{$randomWord}}'),              // Valid Part Number\r",
							"        length: _.random(1, 99999),                                         // Valid Length\r",
							"        width: _.random(1, 99999),                                          // Valid Width\r",
							"        productionLines: pm.variables.get('validProductLine')               // Valid Production Line\r",
							"    };\r",
							"\r",
							"    const testCases = {\r",
							"        CT01_Valid,\r",
							"\r",
							"        CT02_Empty: { \r",
							"            name: null,                                                     // Empty Name\r",
							"            partNumber: null,                                               // Empty Part Number\r",
							"            length: null,                                                   // Empty Length\r",
							"            width: null,                                                    // Empty Width\r",
							"            productionLines: null                                           // Empty Production Line\r",
							"        },\r",
							"\r",
							"        CT03_Negative: {\r",
							"            ..._.cloneDeep(CT01_Valid),\r",
							"            length: validation.negativeLengthAndWidth,                      // Negative Length\r",
							"            width: validation.negativeLengthAndWidth                        // Negative Width\r",
							"        },\r",
							"\r",
							"        CT04_Maxlength: {\r",
							"            ..._.cloneDeep(CT01_Valid),\r",
							"            name: \"a\".repeat(validation.maxNameAndPartNumber + 1),          // Maxlength Name\r",
							"            partNumber: \"a\".repeat(validation.maxNameAndPartNumber + 1),    // Maxlength Part Number \r",
							"            length: \"1\".repeat(validation.maxLengthAndWidth + 1),           // Maxlength Length \r",
							"            width: \"1\".repeat(validation.maxLengthAndWidth + 1)             // Maxlength Width   \r",
							"        },\r",
							"\r",
							"        CT05_NonInt: {\r",
							"            ..._.cloneDeep(CT01_Valid),\r",
							"            length: validation.nonIntLengthAndWidth,                        // Non-Int Length\r",
							"            width: validation.nonIntLengthAndWidth                          // Non-Int Width\r",
							"        },\r",
							"\r",
							"        CT06_Duplicated: {\r",
							"            ..._.cloneDeep(CT01_Valid),\r",
							"            partNumber: validation.duplicatedPartNumber                     // Duplicated Part Number\r",
							"        }\r",
							"    };\r",
							"\r",
							"    /* -------------------------------------------------------------------------------------------------------\r",
							"                                                    EXECUTION\r",
							"    ------------------------------------------------------------------------------------------------------- */\r",
							"    //                          [QA] Choose a test data object above and put in testData                    //\r",
							"    testData = testCases.CT01_Valid\r",
							"    for (var key in testData) {\r",
							"        pm.variables.set(`qa_${key}`, testData[key] !== null \r",
							"            ? testData[key]\r",
							"            : null)\r",
							"    }\r",
							"}, 300)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* -------------------------------------------------------------------------------------------------------\r",
							"                                                VARIABLES\r",
							"------------------------------------------------------------------------------------------------------- */\r",
							"// RESPONSE\r",
							"const message = pm.response.text() \r",
							"const formdata = pm.request.body.formdata\r",
							"const requestData = {\r",
							"    top: formdata.find(item => item.key === \"top\").src,\r",
							"    bottom: formdata.find(item => item.key === \"bottom\").src,\r",
							"    name: formdata.find(item => item.key === \"name\").value,\r",
							"    partNumber: formdata.find(item => item.key === \"partNumber\").value,\r",
							"    lengthPCB: formdata.find(item => item.key === \"length\").value,\r",
							"    width: formdata.find(item => item.key === \"width\").value,\r",
							"    productionLines: formdata.find(item => item.key === \"productionLines\").value\r",
							"}\r",
							"\r",
							"// VALIDATION\r",
							"const validation = pm.variables.get(\"validation\") // get the validation object defined in the pre-request\r",
							"\r",
							"\r",
							"/* -------------------------------------------------------------------------------------------------------\r",
							"                                                FUNCTIONS\r",
							"------------------------------------------------------------------------------------------------------- */\r",
							"// TEST BASE\r",
							"function testExecution(testName, condition, expectedResult) {\r",
							"    if (condition) {\r",
							"        pm.test(testName, function () {\r",
							"            pm.expect(expectedResult).to.be.true\r",
							"        })\r",
							"        return true\r",
							"    }\r",
							"    else {\r",
							"        return false\r",
							"    }\r",
							"}\r",
							"\r",
							"// MULTIPLE TESTS\r",
							"\r",
							"let c = 1\r",
							"let isRequiredFieldsEmpty = true\r",
							"function testEmptyField(fieldName, fieldValue, msg) {\r",
							"    let result = testExecution(\r",
							"        `CT02 [${c}/5] - Block empty ${fieldName} | ${fieldName} is ${fieldValue}`,\r",
							"        fieldValue === null || fieldValue === \"null\",\r",
							"        pm.response.code === 400 && message.includes(`empty-${msg}`)\r",
							"    )\r",
							"    isRequiredFieldsEmpty = isRequiredFieldsEmpty && result\r",
							"    c++\r",
							"}\r",
							"\r",
							"/* -------------------------------------------------------------------------------------------------------\r",
							"                                                TESTS\r",
							"------------------------------------------------------------------------------------------------------- */\r",
							"testEmptyField(\"Name\", requestData.name, 'name')\r",
							"testEmptyField(\"Part Number\", requestData.partNumber, 'part-number')\r",
							"testEmptyField(\"Length\", requestData.lengthPCB, 'length')\r",
							"testEmptyField(\"Width\", requestData.width, 'width')\r",
							"testEmptyField(\"Production Lines\", requestData.productionLines, 'lines')\r",
							"\r",
							"let isFileEmpty = testExecution(\r",
							"    `CT02 - Block empty Top and Bottom | Top file is '${requestData.top}' and Bottom file is '${requestData.top}'`,\r",
							"    requestData.top === undefined && requestData.bottom === undefined,\r",
							"    pm.response.code == 400 && message.includes(\"empty-file\") \r",
							")\r",
							"\r",
							"let isLengthNegative = testExecution(\r",
							"    `CT03 - Block negative length | Length is ${requestData.lengthPCB}`,\r",
							"    requestData.lengthPCB < 0,\r",
							"    pm.response.code == 400 && message.includes(\"negative-length\") \r",
							")\r",
							"\r",
							"let isWidthNegative = testExecution(\r",
							"    `CT03 - Block negative width | Width is ${requestData.width}`,\r",
							"    requestData.width < 0,\r",
							"    pm.response.code == 400 && message.includes(\"negative-width\") \r",
							")\r",
							"\r",
							"let isNameTooLong = testExecution(\r",
							"    `CT04 - Block maximum characters in Name | Name has ${requestData.name?.length} characters and the maximum is ${validation.maxNameAndPartNumber}`,\r",
							"    requestData.name?.length > validation.maxNameAndPartNumber,\r",
							"    pm.response.code == 400 && message.includes(\"max-name\") \r",
							")\r",
							"\r",
							"let isPartNumberTooLong = testExecution(\r",
							"    `CT04 - Block maximum characters in Part Number | Part Number has ${requestData.partNumber?.length} characters and the maximum is ${validation.maxNameAndPartNumber}`,\r",
							"    requestData.partNumber?.length > validation.maxNameAndPartNumber,\r",
							"    pm.response.code == 400 && message.includes(\"maxlength-partNumber\") \r",
							")\r",
							"\r",
							"let isLengthTooLong = testExecution(\r",
							"    `CT04 - Block maximum characters in Length | Length has ${String(requestData.lengthPCB)?.length} characters and the maximum is ${validation.maxLengthAndWidth}`,\r",
							"    String(requestData.lengthPCB)?.length > validation.maxLengthAndWidth,\r",
							"    pm.response.code == 400 && message.includes(\"max-length\") \r",
							")\r",
							"\r",
							"let isWidthTooLong = testExecution(\r",
							"    `CT04 - Block maximum characters in width | Width has ${String(requestData.width)?.length} characters and the maximum is ${validation.maxLengthAndWidth}`,\r",
							"    String(requestData.width)?.length > validation.maxLengthAndWidth,\r",
							"    pm.response.code == 400 && message.includes(\"max-width\") \r",
							")\r",
							"\r",
							"let isLengthNonNumeric = testExecution(\r",
							"    `CT05 - Block non int characters in Length | Length is '${requestData.lengthPCB}'`,\r",
							"    requestData.lengthPCB !== null && requestData.lengthPCB !== \"null\" && isNaN(requestData.lengthPCB),\r",
							"    pm.response.code == 400 && message.includes(\"max-length\") \r",
							")\r",
							"\r",
							"let isWidthNonNumeric = testExecution(\r",
							"    `CT05 - Block non int characters in width | Width is '${requestData.width}'`,\r",
							"    requestData.width !== null && requestData.width !== \"null\" && isNaN(requestData.width),\r",
							"    pm.response.code == 400 && message.includes(\"max-width\") \r",
							")\r",
							"\r",
							"let isPartNumberDublicated = testExecution(\r",
							"    `CT06 - Block duplicated Part Number | Part Number ${requestData.partNumber} is duplicated`,\r",
							"    requestData.partNumber === validation.duplicatedPartNumber,\r",
							"    pm.response.code == 400 && message.includes(\"partNumber-exists\") \r",
							")\r",
							"\r",
							"let isFileInvalid = testExecution(\r",
							"    `CT07 - Block invalid file in Top and Bottom | Top file is '${requestData.top}' and Bottom is is '${requestData.bottom}'`,\r",
							"    (requestData.top !== undefined && !requestData.top.includes('txt')) \r",
							"    || (requestData.bottom !== undefined && !requestData.bottom.includes('txt')),\r",
							"    pm.response.code == 400 && message.includes(\"invalid-file\") \r",
							")\r",
							"\r",
							"testExecution(\r",
							"    `CT01 - Sumbission Rules\r",
							"        name: ${requestData.name}; \r",
							"        partNumber: ${requestData.partNumber}; \r",
							"        length: ${requestData.lengthPCB}; \r",
							"        width: ${requestData.width};\r",
							"        productionLines: ${requestData.productionLines}; \r",
							"        top: ${requestData.top};\r",
							"        bottom: ${requestData.bottom}`,\r",
							"    !isRequiredFieldsEmpty\r",
							"    && !isFileEmpty \r",
							"    && !isLengthNegative \r",
							"    && !isWidthNegative \r",
							"    && !isNameTooLong\r",
							"    && !isPartNumberTooLong\r",
							"    && !isLengthTooLong\r",
							"    && !isWidthTooLong\r",
							"    && !isLengthNonNumeric\r",
							"    && !isWidthNonNumeric\r",
							"    && !isWidthNonNumeric\r",
							"    && !isPartNumberDublicated\r",
							"    && !isFileInvalid, \r",
							"    pm.response.code == 201 && message.includes(\"pcb-created\") \r",
							")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "top",
							"type": "file",
							"src": []
						},
						{
							"key": "bottom",
							"type": "file",
							"src": []
						},
						{
							"key": "name",
							"value": "{{qa_name}}",
							"type": "default"
						},
						{
							"key": "partNumber",
							"value": "{{qa_partNumber}}",
							"type": "text"
						},
						{
							"key": "length",
							"value": "{{qa_length}}",
							"type": "default"
						},
						{
							"key": "width",
							"value": "{{qa_width}}",
							"type": "default"
						},
						{
							"key": "productionLines",
							"value": "{{qa_productionLines}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{api_url}}/pcbs",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"pcbs"
					]
				}
			},
			"response": []
		}
	]
}